# Generated by Django 4.2.11 on 2024-07-09 14:51

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('teams', '0001_initial'),
        ('players', '0001_initial'),
        ('leagues', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BuildingEvent',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(blank=True, null=True)),
                ('type', models.IntegerField(blank=True, null=True)),
                ('hp', models.FloatField(blank=True, null=True)),
                ('max_hp', models.FloatField(blank=True, null=True)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('is_radiant', models.BooleanField(blank=True, null=True)),
                ('npc_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourierEvent',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(blank=True, null=True)),
                ('owner', models.IntegerField(blank=True, null=True)),
                ('is_radiant', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchPickBan',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_pick', models.BooleanField(blank=True, null=True)),
                ('hero_id', models.IntegerField(blank=True, null=True)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('banned_hero_id', models.IntegerField(blank=True, null=True)),
                ('is_radiant', models.BooleanField(blank=True, null=True)),
                ('player_index', models.IntegerField(blank=True, null=True)),
                ('was_banned_successfully', models.BooleanField(blank=True, null=True)),
                ('base_win_rate', models.IntegerField(blank=True, null=True)),
                ('adjusted_win_rate', models.IntegerField(blank=True, null=True)),
                ('pick_probability', models.IntegerField(blank=True, null=True)),
                ('is_captain', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchPlayerAbility',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('ability_id', models.IntegerField(blank=True, null=True)),
                ('level', models.IntegerField(blank=True, null=True)),
                ('game_version_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchPlayerAdditionalUnit',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('match_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('player_slot', models.IntegerField(blank=True, null=True)),
                ('item0_id', models.IntegerField(blank=True, null=True)),
                ('item1_id', models.IntegerField(blank=True, null=True)),
                ('item2_id', models.IntegerField(blank=True, null=True)),
                ('item3_id', models.IntegerField(blank=True, null=True)),
                ('item4_id', models.IntegerField(blank=True, null=True)),
                ('item5_id', models.IntegerField(blank=True, null=True)),
                ('backpack0_id', models.IntegerField(blank=True, null=True)),
                ('backpack1_id', models.IntegerField(blank=True, null=True)),
                ('backpack2_id', models.IntegerField(blank=True, null=True)),
                ('neutral0_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchPlayerSpectator',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('steam_id', models.IntegerField(blank=True, null=True)),
                ('match_id', models.IntegerField(blank=True, null=True)),
                ('is_radiant_coach', models.BooleanField(blank=True, null=True)),
                ('is_victory', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchRuneEvent',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(blank=True, null=True)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('location', models.IntegerField(blank=True, null=True)),
                ('rune_type', models.IntegerField(blank=True, null=True)),
                ('action', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoshanEvent',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('hp', models.FloatField(blank=True, null=True)),
                ('max_hp', models.FloatField(blank=True, null=True)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('item0', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TowerDeathEvent',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('radiant', models.IntegerField(blank=True, null=True)),
                ('dire', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WardEvent',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(blank=True, null=True)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('ward_type', models.IntegerField(blank=True, null=True)),
                ('action', models.IntegerField(blank=True, null=True)),
                ('player_destroyed', models.IntegerField(blank=True, null=True)),
                ('from_player', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchPlayer',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('match_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('player_slot', models.IntegerField(blank=True, null=True)),
                ('hero_id', models.IntegerField(blank=True, null=True)),
                ('is_radiant', models.BooleanField(blank=True, null=True)),
                ('num_kills', models.IntegerField(blank=True, null=True)),
                ('num_deaths', models.IntegerField(blank=True, null=True)),
                ('num_assists', models.IntegerField(blank=True, null=True)),
                ('leaver_status', models.IntegerField(blank=True, null=True)),
                ('num_last_hits', models.IntegerField(blank=True, null=True)),
                ('num_denies', models.IntegerField(blank=True, null=True)),
                ('gold_per_minute', models.IntegerField(blank=True, null=True)),
                ('experience_per_minute', models.IntegerField(blank=True, null=True)),
                ('level', models.IntegerField(blank=True, null=True)),
                ('gold', models.IntegerField(blank=True, null=True)),
                ('gold_spent', models.IntegerField(blank=True, null=True)),
                ('hero_damage', models.IntegerField(blank=True, null=True)),
                ('tower_damage', models.IntegerField(blank=True, null=True)),
                ('party_id', models.IntegerField(blank=True, null=True)),
                ('is_random', models.BooleanField(blank=True, null=True)),
                ('lane', models.IntegerField(blank=True, null=True)),
                ('streak_prediction', models.IntegerField(blank=True, null=True)),
                ('intentional_feeding', models.BooleanField(blank=True, null=True)),
                ('role', models.IntegerField(blank=True, null=True)),
                ('imp', models.IntegerField(blank=True, null=True)),
                ('award', models.IntegerField(blank=True, null=True)),
                ('item0_id', models.IntegerField(blank=True, null=True)),
                ('item1_id', models.IntegerField(blank=True, null=True)),
                ('item2_id', models.IntegerField(blank=True, null=True)),
                ('item3_id', models.IntegerField(blank=True, null=True)),
                ('item4_id', models.IntegerField(blank=True, null=True)),
                ('item5_id', models.IntegerField(blank=True, null=True)),
                ('backpack0_id', models.IntegerField(blank=True, null=True)),
                ('backpack1_id', models.IntegerField(blank=True, null=True)),
                ('backpack2_id', models.IntegerField(blank=True, null=True)),
                ('behavior', models.IntegerField(blank=True, null=True)),
                ('hero_healing', models.IntegerField(blank=True, null=True)),
                ('roam_lane', models.IntegerField(blank=True, null=True)),
                ('abilities', models.JSONField(blank=True, null=True)),
                ('is_victory', models.BooleanField(blank=True, null=True)),
                ('networth', models.IntegerField(blank=True, null=True)),
                ('neutral0_id', models.IntegerField(blank=True, null=True)),
                ('dota_plus_hero_xp', models.IntegerField(blank=True, null=True)),
                ('invisible_seconds', models.IntegerField(blank=True, null=True)),
                ('match_player_stats', models.JSONField(blank=True, null=True)),
                ('stats', models.JSONField(blank=True, null=True)),
                ('playback_data', models.JSONField(blank=True, null=True)),
                ('is_dire', models.BooleanField(blank=True, null=True)),
                ('role_basic', models.IntegerField(blank=True, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('base_slot', models.IntegerField(blank=True, null=True)),
                ('kda', models.FloatField(blank=True, null=True)),
                ('map_location_home_fountain', models.IntegerField(blank=True, null=True)),
                ('faction', models.IntegerField(blank=True, null=True)),
                ('calculate_imp_lane', models.IntegerField(blank=True, null=True)),
                ('game_version_id', models.IntegerField(blank=True, null=True)),
                ('additional_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='matches.matchplayeradditionalunit')),
                ('steam_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='players.steamaccount', to_field='id')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchPlaybackData',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('radiant_captain_hero_id', models.IntegerField(blank=True, null=True)),
                ('dire_captain_hero_id', models.IntegerField(blank=True, null=True)),
                ('building_events', models.ManyToManyField(related_name='match_playback_data', to='matches.buildingevent')),
                ('courier_events', models.ManyToManyField(related_name='match_playback_data', to='matches.courierevent')),
                ('roshan_events', models.ManyToManyField(related_name='match_playback_data', to='matches.roshanevent')),
                ('rune_events', models.ManyToManyField(related_name='match_playback_data', to='matches.matchruneevent')),
                ('tower_death_events', models.ManyToManyField(related_name='match_playback_data', to='matches.towerdeathevent')),
                ('ward_events', models.ManyToManyField(related_name='match_playback_data', to='matches.wardevent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.PositiveBigIntegerField(unique=True)),
                ('did_radiant_win', models.BooleanField(blank=True, null=True)),
                ('duration_seconds', models.PositiveBigIntegerField(blank=True, null=True)),
                ('start_date_time', models.BigIntegerField(blank=True, null=True)),
                ('tower_status_radiant', models.PositiveBigIntegerField(blank=True, null=True)),
                ('tower_status_dire', models.PositiveBigIntegerField(blank=True, null=True)),
                ('barracks_status_radiant', models.PositiveBigIntegerField(blank=True, null=True)),
                ('barracks_status_dire', models.PositiveBigIntegerField(blank=True, null=True)),
                ('cluster_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('first_blood_time', models.IntegerField(blank=True, null=True)),
                ('lobby_type', models.PositiveBigIntegerField(blank=True, null=True)),
                ('num_human_players', models.PositiveBigIntegerField(blank=True, null=True)),
                ('game_mode', models.PositiveBigIntegerField(blank=True, null=True)),
                ('replay_salt', models.PositiveBigIntegerField(blank=True, null=True)),
                ('is_stats', models.BooleanField(blank=True, null=True)),
                ('tournament_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('tournament_round', models.PositiveBigIntegerField(blank=True, null=True)),
                ('average_rank', models.PositiveBigIntegerField(blank=True, null=True)),
                ('actual_rank', models.PositiveBigIntegerField(blank=True, null=True)),
                ('average_imp', models.PositiveBigIntegerField(blank=True, null=True)),
                ('parsed_date_time', models.PositiveBigIntegerField(blank=True, null=True)),
                ('stats_date_time', models.PositiveBigIntegerField(blank=True, null=True)),
                ('game_version_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('region_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('sequence_num', models.PositiveBigIntegerField(blank=True, null=True)),
                ('rank', models.PositiveBigIntegerField(blank=True, null=True)),
                ('bracket', models.PositiveBigIntegerField(blank=True, null=True)),
                ('end_date_time', models.PositiveBigIntegerField(blank=True, null=True)),
                ('actual_rank_weight', models.PositiveBigIntegerField(blank=True, null=True)),
                ('analysis_outcome', models.PositiveBigIntegerField(blank=True, null=True)),
                ('predicted_outcome_weight', models.PositiveBigIntegerField(blank=True, null=True)),
                ('bottom_lane_outcome', models.PositiveBigIntegerField(blank=True, null=True)),
                ('mid_lane_outcome', models.PositiveBigIntegerField(blank=True, null=True)),
                ('top_lane_outcome', models.PositiveBigIntegerField(blank=True, null=True)),
                ('radiant_networth_lead', models.TextField(blank=True, null=True)),
                ('radiant_experience_lead', models.TextField(blank=True, null=True)),
                ('radiant_kills', models.TextField(blank=True, null=True)),
                ('dire_kills', models.TextField(blank=True, null=True)),
                ('tower_status', models.JSONField(blank=True, null=True)),
                ('lane_report', models.JSONField(blank=True, null=True)),
                ('win_rates', models.TextField(blank=True, null=True)),
                ('predicted_win_rates', models.TextField(blank=True, null=True)),
                ('tower_deaths', models.JSONField(blank=True, null=True)),
                ('chat_events', models.JSONField(blank=True, null=True)),
                ('did_request_download', models.BooleanField(blank=True, null=True)),
                ('game_result', models.PositiveBigIntegerField(blank=True, null=True)),
                ('dire_players', models.ManyToManyField(blank=True, related_name='dire_matches_played', to='matches.matchplayer')),
                ('dire_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dire_matches', to='teams.team', to_field='id')),
                ('league', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='leagues.league', to_field='id')),
                ('pick_bans', models.ManyToManyField(blank=True, to='matches.matchpickban')),
                ('playback_data', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match', to='matches.matchplaybackdata')),
                ('players', models.ManyToManyField(blank=True, to='matches.matchplayer')),
                ('radiant_players', models.ManyToManyField(blank=True, related_name='radiant_matches_played', to='matches.matchplayer')),
                ('radiant_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='radiant_matches', to='teams.team', to_field='id')),
                ('series', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='leagues.series', to_field='id')),
                ('spectators', models.ManyToManyField(blank=True, to='matches.matchplayerspectator')),
            ],
            options={
                'db_table': 'matches',
                'ordering': ['-start_date_time'],
            },
        ),
        migrations.CreateModel(
            name='CourierEventDetail',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('time', models.IntegerField(blank=True, null=True)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('hp', models.FloatField(blank=True, null=True)),
                ('is_flying', models.BooleanField(blank=True, null=True)),
                ('respawn_time', models.FloatField(blank=True, null=True)),
                ('item0Id', models.IntegerField(blank=True, null=True)),
                ('item1Id', models.IntegerField(blank=True, null=True)),
                ('item2Id', models.IntegerField(blank=True, null=True)),
                ('item3Id', models.IntegerField(blank=True, null=True)),
                ('item4Id', models.IntegerField(blank=True, null=True)),
                ('item5Id', models.IntegerField(blank=True, null=True)),
                ('courier_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='matches.courierevent')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
